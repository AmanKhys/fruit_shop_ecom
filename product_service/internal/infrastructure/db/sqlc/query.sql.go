// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
insert into products
(name, price, stock)
values (?, ?, ?)
returning id, name, price, stock, isdeleted
`

type CreateProductParams struct {
	Name  string      `json:"name"`
	Price interface{} `json:"price"`
	Stock int64       `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, db DBTX, arg CreateProductParams) (Product, error) {
	row := db.QueryRowContext(ctx, createProduct, arg.Name, arg.Price, arg.Stock)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Isdeleted,
	)
	return i, err
}

const deleteProductByID = `-- name: DeleteProductByID :exec
update products
set isDeleted = true
where id = ?
returning isDeleted
`

func (q *Queries) DeleteProductByID(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, deleteProductByID, id)
	return err
}

const getFilteredProducts = `-- name: GetFilteredProducts :many
select id, name, price, stock, isdeleted from products
where price >= ?1 
and price <= ?2
and isDeleted = false
`

type GetFilteredProductsParams struct {
	Min interface{} `json:"min"`
	Max interface{} `json:"max"`
}

func (q *Queries) GetFilteredProducts(ctx context.Context, db DBTX, arg GetFilteredProductsParams) ([]Product, error) {
	rows, err := db.QueryContext(ctx, getFilteredProducts, arg.Min, arg.Max)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Isdeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
select id, name, price, stock, isdeleted from products
where id = ?
and isDeleted = false
`

func (q *Queries) GetProductByID(ctx context.Context, db DBTX, id int64) (Product, error) {
	row := db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Isdeleted,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
select id, name, price, stock, isdeleted from products
where isDeleted = false
`

// go-type: min=float64
// go-type: max=float64
func (q *Queries) GetProducts(ctx context.Context, db DBTX) ([]Product, error) {
	rows, err := db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Isdeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsForAdmin = `-- name: GetProductsForAdmin :many
select id, name, price, stock, isdeleted from products
`

func (q *Queries) GetProductsForAdmin(ctx context.Context, db DBTX) ([]Product, error) {
	rows, err := db.QueryContext(ctx, getProductsForAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Isdeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductByID = `-- name: UpdateProductByID :one
update products
set name = ?, price = ?, stock = ?
where id = ?
returning id, name, price, stock, isdeleted
`

type UpdateProductByIDParams struct {
	Name  string      `json:"name"`
	Price interface{} `json:"price"`
	Stock int64       `json:"stock"`
	ID    int64       `json:"id"`
}

func (q *Queries) UpdateProductByID(ctx context.Context, db DBTX, arg UpdateProductByIDParams) (Product, error) {
	row := db.QueryRowContext(ctx, updateProductByID,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Isdeleted,
	)
	return i, err
}

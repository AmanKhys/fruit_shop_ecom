// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (email, password)
values (?, ?)
returning id, email
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (CreateUserRow, error) {
	row := db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, email, password, role
from users
where email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, db DBTX, email string) (User, error) {
	row := db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Role,
	)
	return i, err
}
